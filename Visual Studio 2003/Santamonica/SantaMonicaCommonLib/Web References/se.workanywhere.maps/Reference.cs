//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SantaMonicaCommonLib.se.workanywhere.maps {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MapServerSoap", Namespace="http://maps.workanywhere.se/MapServer")]
    public partial class MapServer : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback setUserSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMapDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMapOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MapServer() {
            this.Url = "http://maps.workanywhere.se/MapServer.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event setUserSessionCompletedEventHandler setUserSessionCompleted;
        
        /// <remarks/>
        public event getMapDataCompletedEventHandler getMapDataCompleted;
        
        /// <remarks/>
        public event getMapCompletedEventHandler getMapCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://maps.workanywhere.se/MapServer/setUserSession", RequestNamespace="http://maps.workanywhere.se/MapServer", ResponseNamespace="http://maps.workanywhere.se/MapServer", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setUserSession(string accountNo, string password, string sessionId, string parameter1, string parameter2) {
            this.Invoke("setUserSession", new object[] {
                        accountNo,
                        password,
                        sessionId,
                        parameter1,
                        parameter2});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginsetUserSession(string accountNo, string password, string sessionId, string parameter1, string parameter2, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("setUserSession", new object[] {
                        accountNo,
                        password,
                        sessionId,
                        parameter1,
                        parameter2}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndsetUserSession(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void setUserSessionAsync(string accountNo, string password, string sessionId, string parameter1, string parameter2) {
            this.setUserSessionAsync(accountNo, password, sessionId, parameter1, parameter2, null);
        }
        
        /// <remarks/>
        public void setUserSessionAsync(string accountNo, string password, string sessionId, string parameter1, string parameter2, object userState) {
            if ((this.setUserSessionOperationCompleted == null)) {
                this.setUserSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetUserSessionOperationCompleted);
            }
            this.InvokeAsync("setUserSession", new object[] {
                        accountNo,
                        password,
                        sessionId,
                        parameter1,
                        parameter2}, this.setUserSessionOperationCompleted, userState);
        }
        
        private void OnsetUserSessionOperationCompleted(object arg) {
            if ((this.setUserSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setUserSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://maps.workanywhere.se/MapServer/getMapData", RequestNamespace="http://maps.workanywhere.se/MapServer", ResponseNamespace="http://maps.workanywhere.se/MapServer", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getMapData(string accountNo, string sessionId, string webServiceType) {
            this.Invoke("getMapData", new object[] {
                        accountNo,
                        sessionId,
                        webServiceType});
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetMapData(string accountNo, string sessionId, string webServiceType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getMapData", new object[] {
                        accountNo,
                        sessionId,
                        webServiceType}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndgetMapData(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void getMapDataAsync(string accountNo, string sessionId, string webServiceType) {
            this.getMapDataAsync(accountNo, sessionId, webServiceType, null);
        }
        
        /// <remarks/>
        public void getMapDataAsync(string accountNo, string sessionId, string webServiceType, object userState) {
            if ((this.getMapDataOperationCompleted == null)) {
                this.getMapDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMapDataOperationCompleted);
            }
            this.InvokeAsync("getMapData", new object[] {
                        accountNo,
                        sessionId,
                        webServiceType}, this.getMapDataOperationCompleted, userState);
        }
        
        private void OngetMapDataOperationCompleted(object arg) {
            if ((this.getMapDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMapDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://maps.workanywhere.se/MapServer/getMap", RequestNamespace="http://maps.workanywhere.se/MapServer", ResponseNamespace="http://maps.workanywhere.se/MapServer", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getMap(int x, int y, int level, int width, int height) {
            this.Invoke("getMap", new object[] {
                        x,
                        y,
                        level,
                        width,
                        height});
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetMap(int x, int y, int level, int width, int height, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getMap", new object[] {
                        x,
                        y,
                        level,
                        width,
                        height}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndgetMap(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void getMapAsync(int x, int y, int level, int width, int height) {
            this.getMapAsync(x, y, level, width, height, null);
        }
        
        /// <remarks/>
        public void getMapAsync(int x, int y, int level, int width, int height, object userState) {
            if ((this.getMapOperationCompleted == null)) {
                this.getMapOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMapOperationCompleted);
            }
            this.InvokeAsync("getMap", new object[] {
                        x,
                        y,
                        level,
                        width,
                        height}, this.getMapOperationCompleted, userState);
        }
        
        private void OngetMapOperationCompleted(object arg) {
            if ((this.getMapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMapCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setUserSessionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getMapDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getMapCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591